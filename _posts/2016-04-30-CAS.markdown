---
layout: post
title:  CAS原理
date:   2016-04-30
categories: concurrent
tags:
- concurrent
- cas
---

##### CAS: compare and set，比较并交换，提供原子操作  

### JAVA CAS实例

以AtomicInteger(mac JDK 1.7.0_79)为例

``` java
    /**
     * Atomically sets to the given value and returns the old value.
     *
     * @param newValue the new value
     * @return the previous value
     */
    public final int getAndSet(int newValue) {
        for (;;) {
            int current = get();
            if (compareAndSet(current, newValue))
                return current;
        }
    }
    
    
    /**
     * Atomically sets the value to the given updated value
     * if the current value {@code ==} the expected value.
     *
     * @param expect the expected value
     * @param update the new value
     * @return true if successful. False return indicates that
     * the actual value was not equal to the expected value.
     */
    public final boolean compareAndSet(int expect, int update) {
        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);
    }
```

* AtomicInteger的getAndSet中可以看出，赋值的时候会循环调用compareAndSet，如果设置成功就返回，失败就重试。

* compareAndSet方法最后会通过JNI接口调用native方法。内部实现就是将内存值与expect值比较，相同就修改，返回true，不同就返回false。

* CAS就是在第二部系统内部方法中 __比较__ 和 __设置__ 两个步骤中保持操作的原子性。

### CAS原理

* 处理器自动保证基本内存操作的原子性
	* 处理器会保证内部操作的原子性，当处理器处理一个字节的时候，其他处理器不能访问这一内存地址，从而保证操作的原子性。某些处理器可以保证同一缓存行操作的原子性
	* 处理器不保证复杂操作的原子性，包括跨总线操作，跨缓存行操作，夸页表操作等
*   总线锁
	* 提供一个LOCK＃信号，当一个处理器在总线上输出此信号，其他处理器的请求将被阻塞。这样处理器可以独占共享内存。
	* 总线锁代价很大，需要锁住cpu和内存的通信
* 缓存锁定
	* 内存区域如果被缓存到处理器的缓存行中，并且在Lock操作期间被锁定，那么当他写回内存时，去修改内部的内存地址。并且允许他的缓存一致性机制保证操作的原子性，来阻止修改由多个处理器缓存的内存数据。当其他处理器写回时，会使缓存行无效。
	* 这一机制适用于整个处理的的操作均可在处理器缓存中进行，如果数据不能保存在缓存中，则不可以使用缓存锁定。
	* 代价小于总线锁，需要处理器支持。

### MESI实现缓存锁定原理

下面介绍一种缓存一致性协议,MESI协议(四态写回无效协议):

MESI协议是以缓存行(缓存的基本数据单位，在Intel的CPU上一般是64字节)的几个状态来命名的(全名是Modified、Exclusive、Share or Invalid)。该协议要求在每个缓存行上维护两个状态位，使得每个数据单位可能处于M、E、S和I这四种状态之一，各种状态含义如下：

* M：被修改的。处于这一状态的数据，只在本CPU中有缓存数据，而其他CPU中没有。同时其状态相对于内存中的值来说，是已经被修改的，且没有更新到内存中。
* E：独占的。处于这一状态的数据，只有在本CPU中有缓存，且其数据没有修改，即与内存中一致。
* S：共享的。处于这一状态的数据在多个CPU中都有缓存，且与内存一致。
* I：无效的。本CPU中的这份缓存已经无效。

这里首先介绍该协议约定的缓存上对应的监听：

* 一个处于M状态的缓存行，必须时刻监听所有试图读取该缓存行对应的主存地址的操作，如果监听到，则必须在此操作执行前把其缓存行中的数据写回CPU。
* 一个处于S状态的缓存行，必须时刻监听使该缓存行无效或者独享该缓存行的请求，如果监听到，则必须把其缓存行状态设置为I。
* 一个处于E状态的缓存行，必须时刻监听其他试图读取该缓存行对应的主存地址的操作，如果监听到，则必须把其缓存行状态设置为S。
* 当CPU需要读取数据时，如果其缓存行的状态是I的，则需要从内存中读取，并把自己状态变成S，如果不是I，则可以直接读取缓存中的值，但在此之前，必须要等待其他CPU的监听结果，如其他CPU也有该数据的缓存且状态是M，则需要等待其把缓存更新到内存之后，再读取。
* 当CPU需要写数据时，只有在其缓存行是M或者E的时候才能执行，否则需要发出特殊的RFO指令(Read Or Ownership，这是一种总线事务)，通知其他CPU置缓存无效(I)，这种情况下会性能开销是相对较大的。在写入完成后，修改其缓存状态为M。

>表格展示MESI状态变化
>>LR: local read  
>>RR: remote read  
>>LW: local write  
>>RW: remote read  

|前\操作\后  | M | E | S | I |
|---|---|---|---|---|
| M | LOCAL |  | RR | RW|
| E | LW | LR | RR | RW|
| S | LW |  | REMOTE | RW|
| I | LW | LR(其他cache无) | LR(其他cache有) | REMOTE|

### CAS存在问题

##### 1.ABA问题

* CAS检查值有没有变化，但是如果值从A变为B有变为A，那么检查时，就会发现它没有变化。
* 一个解决的方法是增加版本号 1A>2B>3A。AtomicStampedReference类解决了这个问题。在值上面加了一个stamp用来标志版本
   
```java
    /**
     * Atomically sets the value of both the reference and stamp
     * to the given update values if the
     * current reference is {@code ==} to the expected reference
     * and the current stamp is equal to the expected stamp.
     *
     * @param expectedReference the expected value of the reference
     * @param newReference the new value for the reference
     * @param expectedStamp the expected value of the stamp
     * @param newStamp the new value for the stamp
     * @return true if successful
     */
    public boolean compareAndSet(V   expectedReference,
                                 V   newReference,
                                 int expectedStamp,
                                 int newStamp) {
        Pair<V> current = pair;
        return
            expectedReference == current.reference &&
            expectedStamp == current.stamp &&
            ((newReference == current.reference &&
              newStamp == current.stamp) ||
             casPair(current, Pair.of(newReference, newStamp)));
    }
    
    private static class Pair<T> {
        final T reference;
        final int stamp;
        private Pair(T reference, int stamp) {
            this.reference = reference;
            this.stamp = stamp;
        }
        static <T> Pair<T> of(T reference, int stamp) {
            return new Pair<T>(reference, stamp);
        }
    }
```

##### 2. 循环时间开销大:

* 通过代码可以看出使用自旋来进行CAS操作，长时间不成功会给CPU带来很大的开销
   
##### 3.只能保证一个变量的原子操作:

* 对一个共享变量操作的时候可以使用CAS，但是多个就不行了。
* 解决方案:i=2,j=a合并成为一个对象,ij=2a，然后进行CAS操作。AtomicReference类。